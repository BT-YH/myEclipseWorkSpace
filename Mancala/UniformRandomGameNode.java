import java.util.ArrayList;
import java.util.Random;


public class UniformRandomGameNode extends GameNode {
	
	public static Random random = new Random();
	public static int nodeCount, expandCount, utilityCount; // counts for search statistics
	int numChildren; // node branching factor
	int depthRemaining; // tree depthRemaining
	long seed; // random number seed
	
	/**
	 * @param numChildren node branching factor
	 * @param depthRemaining depth remaining in game tree
	 * @param seed random number seed
	 */
	public UniformRandomGameNode(int numChildren, int depthRemaining, long seed) {
		this.numChildren = numChildren;
		this.depthRemaining = depthRemaining;
		this.seed = seed;
		player = MAX;
		nodeCount++;
	}

	/**
	 * @param player current player (GameNode.MAX or GameNode.MIN), alternating from parent to child
	 * @param numChildren node branching factor
	 * @param depthRemaining depth remaining in game tree
	 * @param seed random number seed
	 */
	public UniformRandomGameNode(int player, int numChildren, int depthRemaining, long seed) {
		this(numChildren, depthRemaining, seed);
		this.player = player;
	}
	
	public ArrayList<GameNode> expand() { // create the given number of random children nodes, each with successive seeds that follow the parent seed, decrementing depthRemaining
		random.setSeed(seed);
		ArrayList<GameNode> children = new ArrayList<GameNode>();
		if (depthRemaining > 0)
			for (int i = 0; i < numChildren; i++)
				children.add(new UniformRandomGameNode(player == MAX ? MIN : MAX, numChildren, depthRemaining - 1, random.nextLong()));
		expandCount++;
		return children;
	}

	@Override
	public boolean gameOver() { // the random game ends at the terminal depth
		return depthRemaining == 0;
	}

	@Override
	public double utility() { // the utility of a leaf node is the uniform random double generated by the node seed
		random.setSeed(seed);
		utilityCount++;
		return random.nextDouble();
	}
	
	static public void resetCounts() { // reset counts used for search statistics
		nodeCount = expandCount = utilityCount = 0;
	}
	
	public static void main(String[] args) {
		// making searchers:
		BKCorrectedAlphaBetaSearcher bk = new BKCorrectedAlphaBetaSearcher(4);
		MinimaxSearcher mm = new MinimaxSearcher(4);
		
		System.out.println("node1:");
		
		UniformRandomGameNode node1 = new UniformRandomGameNode(2, 4 , 4242L);
		bk.eval(node1);
		System.out.printf(" nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();
		mm.eval(node1);
		System.out.printf("\n nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();

		
		System.out.println("\nnode2:");
		bk = new BKCorrectedAlphaBetaSearcher(9);
		mm = new MinimaxSearcher(9);
		
		UniformRandomGameNode node2 = new UniformRandomGameNode(2, 9 , 4242L);
		
		bk.eval(node2);
		System.out.printf(" nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();
		mm.eval(node2);
		System.out.printf("\n nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();

		
		System.out.println("\nnode3:");
		bk = new BKCorrectedAlphaBetaSearcher(4);
		mm = new MinimaxSearcher(4);
		
		UniformRandomGameNode node3 = new UniformRandomGameNode(6, 4 , 4242L);		
		bk.eval(node3);
		System.out.printf(" nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();
		mm.eval(node3);
		System.out.printf("\n nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();

		
		System.out.println("\nnode4:");
		bk = new BKCorrectedAlphaBetaSearcher(9);
		mm = new MinimaxSearcher(9);
		
		UniformRandomGameNode node4 = new UniformRandomGameNode(6, 9 , 4242L);
		bk.eval(node4);
		System.out.printf(" nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();
		mm.eval(node4);
		System.out.printf("\n nodeCount: %d, expandCount: %d, utilityCount: %d", nodeCount, expandCount, utilityCount);
		resetCounts();

	}
}
